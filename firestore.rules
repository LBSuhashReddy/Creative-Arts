/*
  File: firestore.rules
  Updated rules to secure all collections.
*/
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rule for the 'artists' collection
    match /artists/{userId} {
      allow read: if true;
      allow update: if request.auth != null && request.auth.uid == userId;

      // Rule: Allow create if the user making the request is an admin.
      // This now checks the 'artists' collection for the admin's role.
      allow create: if request.auth != null &&
                      get(/databases/$(database)/documents/artists/$(request.auth.uid)).data.role == 'admin';
    }

    // Rule for the 'users' collection
    match /users/{userId} {
      allow read: if true;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // --- RULE FOR EVENTS ---
    match /events/{eventId} {
      // Anyone can read the list of events.
      allow read: if true;

      // Only an admin can create new events.
      // This now also checks the 'artists' collection for the admin's role.
      allow create: if request.auth != null &&
                      get(/databases/$(database)/documents/artists/$(request.auth.uid)).data.role == 'admin';
    }
    match /artworks/{artworkId} {
      // Anyone can read artworks
      allow read: if true;
      
      // A user can create an artwork if they are logged in and the
      // 'artistId' in the new document matches their own user ID.
      allow create: if request.auth != null && request.resource.data.artistId == request.auth.uid;
      
      // A user can update or delete an artwork if they are the owner.
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/artworks/$(artworkId)).data.artistId == request.auth.uid;
    }
  }
}